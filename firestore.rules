rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // üõ°Ô∏è SISTEMA DE SEGURIDAD BASADO EN ROLES PERMANENTE
    // Estas reglas est√°n dise√±adas para funcionar indefinidamente
    
    // üìã JERARQU√çA DE PERMISOS POR ROL:
    //
    // üî¥ DIRECTOR DE ACADEMIA (academyDirector):
    // - Gesti√≥n completa de la academia
    // - Agregar/eliminar usuarios
    // - Modificar configuraci√≥n de la academia
    // - Gestionar todos los datos (jugadores, planes, torneos, etc.)
    // - Ver reportes avanzados
    //
    // üü° SUBDIRECTOR DE ACADEMIA (academySubdirector):
    // - Gestionar usuarios (agregar/modificar, NO eliminar)
    // - Crear planes de entrenamiento y objetivos
    // - Gestionar torneos
    // - Ver reportes avanzados
    // - Modificar configuraci√≥n b√°sica
    //
    // üü¢ ENTRENADOR DE ACADEMIA (academyCoach):
    // - Crear planes de entrenamiento y objetivos
    // - Gestionar torneos
    // - Registrar sesiones y m√©tricas
    // - Crear encuestas
    // - Ver todos los jugadores
    //
    // üîµ ENTRENADOR DE GRUPO (groupCoach):
    // - Registrar sesiones y m√©tricas
    // - Ver jugadores asignados
    // - Actualizar informaci√≥n de entrenamiento
    //
    // üü£ ENTRENADOR ASISTENTE (assistantCoach):
    // - Registrar sesiones b√°sicas
    // - Ver jugadores asignados
    // - Actualizar m√©tricas b√°sicas
    
    // ===== FUNCIONES HELPER PARA VERIFICAR ROLES =====
    
    // Obtener el rol del usuario en una academia espec√≠fica
    function getUserRole(academiaId) {
      let userDoc = /databases/$(database)/documents/academias/$(academiaId)/usuarios/$(request.auth.uid);
      return exists(userDoc) ? get(userDoc).data.role : null;
    }
    
    // Verificar si el usuario pertenece a la academia
    function belongsToAcademia(academiaId) {
      return exists(/databases/$(database)/documents/academias/$(academiaId)/usuarios/$(request.auth.uid));
    }
    
    // Verificar si es director de la academia
    function isDirector(academiaId) {
      return getUserRole(academiaId) == 'academyDirector';
    }
    
    // Verificar si es subdirector de la academia
    function isSubdirector(academiaId) {
      return getUserRole(academiaId) == 'academySubdirector';
    }
    
    // Verificar si puede gestionar usuarios (director o subdirector)
    function canManageUsers(academiaId) {
      let role = getUserRole(academiaId);
      return role == 'academyDirector' || role == 'academySubdirector';
    }
    
    // Verificar si puede eliminar usuarios (solo director)
    function canDeleteUsers(academiaId) {
      return getUserRole(academiaId) == 'academyDirector';
    }
    
    // Verificar si puede gestionar la academia completa (director o creador)
    function canManageAcademia(academiaId) {
      let academiaDoc = get(/databases/$(database)/documents/academias/$(academiaId));
      return academiaDoc.data.creadorId == request.auth.uid || getUserRole(academiaId) == 'academyDirector';
    }
    
    // Permitir eliminaci√≥n a creadores y directores
    function canDeleteAcademia(academiaId) {
      let academiaDoc = get(/databases/$(database)/documents/academias/$(academiaId));
      return request.auth != null && 
             (academiaDoc.data.creadorId == request.auth.uid || 
              getUserRole(academiaId) == 'academyDirector');
    }
    
    // Verificar si puede crear/modificar planes de entrenamiento (director, subdirector, academyCoach)
    function canManageTrainingPlans(academiaId) {
      let role = getUserRole(academiaId);
      return role == 'academyDirector' || role == 'academySubdirector' || role == 'academyCoach';
    }
    
    // Verificar si puede entrenar (todos los roles de entrenamiento)
    function canTrain(academiaId) {
      let role = getUserRole(academiaId);
      return role == 'academyDirector' || role == 'academySubdirector' || role == 'academyCoach' || role == 'groupCoach' || role == 'assistantCoach';
    }
    
    // Verificar si puede ver reportes avanzados (director y subdirector)
    function canViewAdvancedReports(academiaId) {
      let role = getUserRole(academiaId);
      return role == 'academyDirector' || role == 'academySubdirector';
    }
    
    // Verificar si puede gestionar torneos (director, subdirector, academyCoach)
    function canManageTournaments(academiaId) {
      let role = getUserRole(academiaId);
      return role == 'academyDirector' || role == 'academySubdirector' || role == 'academyCoach';
    }
    
    // Verificar si el usuario tiene permisos de gesti√≥n en alguna academia
    function hasManagementPermissions() {
      // Esta funci√≥n verifica si el usuario es director o subdirector en al menos una academia
      // Para una implementaci√≥n m√°s eficiente, podr√≠amos mantener una lista de academias del usuario
      return true; // Temporal: permitir acceso mientras implementamos verificaci√≥n completa
    }
    
    // ===== REGLAS PRINCIPALES =====
    
    // ACADEMIAS - Estructura principal
    match /academias/{academiaId} {
      // Lectura: Cualquier usuario autenticado puede ver academias b√°sicas
      allow read: if request.auth != null;
      
      // Creaci√≥n: Cualquier usuario autenticado puede crear una academia nueva
      allow create: if request.auth != null;
      
      // Actualizaci√≥n: Solo creadores pueden "eliminar" (activa=false) su academia
      allow update: if request.auth != null && 
                       (get(/databases/$(database)/documents/academias/$(academiaId)).data.creadorId == request.auth.uid ||
                        getUserRole(academiaId) == 'academyDirector');
      
      // Eliminaci√≥n: Solo creadores y directores pueden eliminar
      allow delete: if request.auth != null && 
                       (get(/databases/$(database)/documents/academias/$(academiaId)).data.creadorId == request.auth.uid ||
                        getUserRole(academiaId) == 'academyDirector');
      
      // USUARIOS DE LA ACADEMIA
      match /usuarios/{userId} {
        // Lectura: Miembros de la academia pueden ver otros usuarios
        allow read: if request.auth != null && belongsToAcademia(academiaId);
        
        // Creaci√≥n: Directores y subdirectores pueden agregar usuarios
        // EXCEPCI√ìN: Creador puede asignarse a s√≠ mismo como director en academia nueva
        allow create: if request.auth != null && 
                         (canManageUsers(academiaId) || 
                          (request.auth.uid == userId && resource == null));
        
        // Actualizaci√≥n: Directores y subdirectores pueden modificar usuarios
        // Los usuarios pueden actualizar cierta informaci√≥n propia
        allow update: if request.auth != null && 
                         (canManageUsers(academiaId) || 
                          (request.auth.uid == userId && 
                           request.resource.data.role == resource.data.role)); // No pueden cambiar su propio rol
        
        // üîç DEBUG: Eliminaci√≥n temporal m√°s permisiva para debugging
        // TEMPORAL: Permitir eliminar si es director O si es el creador de la academia
        allow delete: if request.auth != null && 
                         (canDeleteUsers(academiaId) || 
                          get(/databases/$(database)/documents/academias/$(academiaId)).data.creadorId == request.auth.uid);
      }
      
      // CONFIGURACI√ìN DE LA ACADEMIA
      match /configuracion/{configId} {
        // Lectura: Miembros pueden leer configuraci√≥n b√°sica
        allow read: if request.auth != null && belongsToAcademia(academiaId);
        
        // Creaci√≥n/Actualizaci√≥n: Solo directores y subdirectores pueden modificar configuraci√≥n
        allow create, update: if request.auth != null && canManageUsers(academiaId);
        
        // Eliminaci√≥n: Solo directores pueden eliminar configuraci√≥n
        allow delete: if request.auth != null && isDirector(academiaId);
      }
      
      // SESIONES DE ENTRENAMIENTO (subcollection)
      match /sessions/{sessionId} {
        // Lectura: Todos los entrenadores pueden ver sesiones
        allow read: if request.auth != null && canTrain(academiaId);
        
        // Creaci√≥n: Todos los entrenadores pueden crear sesiones
        allow create: if request.auth != null && canTrain(academiaId);
        
        // Actualizaci√≥n: El creador de la sesi√≥n o roles superiores pueden modificar
        allow update: if request.auth != null && 
                         (canTrain(academiaId) && 
                          (resource.data.createdBy == request.auth.uid || canManageUsers(academiaId)));
        
        // Eliminaci√≥n: Director, subdirector o el creador de la sesi√≥n
        allow delete: if request.auth != null && 
                         (canManageUsers(academiaId) || 
                          (canTrain(academiaId) && resource.data.createdBy == request.auth.uid));
        
        // EXCEPCI√ìN TEMPORAL: Creador de la academia puede acceder durante setup inicial
        allow read: if request.auth != null && 
                       get(/databases/$(database)/documents/academias/$(academiaId)).data.creadorId == request.auth.uid;
      }
      
      // TORNEOS DISPUTADOS (subcollection)
      match /disputedTournaments/{tournamentId} {
        // Lectura: Todos los entrenadores pueden ver torneos disputados
        allow read: if request.auth != null && canTrain(academiaId);
        
        // Creaci√≥n/Actualizaci√≥n: Director, subdirector y academyCoach pueden gestionar
        allow create, update: if request.auth != null && canManageTournaments(academiaId);
        
        // Eliminaci√≥n: Solo director y subdirector pueden eliminar registros de torneos
        allow delete: if request.auth != null && canManageUsers(academiaId);
        
        // EXCEPCI√ìN TEMPORAL: Creador de la academia puede acceder durante setup inicial
        allow read: if request.auth != null && 
                       get(/databases/$(database)/documents/academias/$(academiaId)).data.creadorId == request.auth.uid;
      }
      
      // SOLICITUDES DE UNI√ìN (subcollection)
      match /solicitudes/{solicitudId} {
        // Cualquier usuario autenticado puede crear solicitudes de uni√≥n
        allow create: if request.auth != null && 
                         request.auth.uid == request.resource.data.userId;
        
        // Lectura: El propio solicitante puede ver su solicitud, o directores de la academia
        allow read: if request.auth != null && 
                       (request.auth.uid == resource.data.userId ||
                        (belongsToAcademia(academiaId) && canManageUsers(academiaId)));
        
        // Actualizaci√≥n/eliminaci√≥n: Solo directores de la academia o el propio solicitante
        allow update, delete: if request.auth != null && 
                                 (request.auth.uid == resource.data.userId ||
                                  (belongsToAcademia(academiaId) && canManageUsers(academiaId)));
      }
      
      // TORNEOS (subcollection)
      match /tournaments/{tournamentId} {
        // Lectura: Todos los entrenadores pueden ver torneos
        allow read: if request.auth != null && canTrain(academiaId);
        
        // Escritura: Director, subdirector y academyCoach pueden gestionar torneos
        allow write: if request.auth != null && canManageTournaments(academiaId);
      }
      
      // TORNEOS FUTUROS (subcollection)
      match /futureTournaments/{tournamentId} {
        // Lectura: Todos los entrenadores pueden ver torneos futuros
        allow read: if request.auth != null && canTrain(academiaId);
        
        // Escritura: Director, subdirector y academyCoach pueden gestionar torneos futuros
        allow write: if request.auth != null && canManageTournaments(academiaId);
      }
      
      // JUGADORES (subcollection)
      match /players/{playerId} {
        // Lectura: Todos los entrenadores pueden ver jugadores
        allow read: if request.auth != null && canTrain(academiaId);
        
        // Creaci√≥n: Director, subdirector y academyCoach pueden crear jugadores
        allow create: if request.auth != null && canManageTrainingPlans(academiaId);
        
        // Actualizaci√≥n: Todos los entrenadores pueden actualizar informaci√≥n de jugadores
        allow update: if request.auth != null && canTrain(academiaId);
        
        // Eliminaci√≥n: Solo director y subdirector pueden eliminar jugadores
        allow delete: if request.auth != null && canManageUsers(academiaId);
      }
      
      // PLANES DE ENTRENAMIENTO (subcollection)
      match /trainingPlans/{planId} {
        // Lectura: Todos los entrenadores pueden ver planes
        allow read: if request.auth != null && canTrain(academiaId);
        
        // Creaci√≥n/Modificaci√≥n: Director, subdirector y academyCoach pueden crear/modificar
        allow create, update: if request.auth != null && canManageTrainingPlans(academiaId);
        
        // Eliminaci√≥n: Solo director y subdirector pueden eliminar planes
        allow delete: if request.auth != null && canManageUsers(academiaId);
      }
      
      // OBJETIVOS (subcollection)
      match /objectives/{objectiveId} {
        // Lectura: Todos los entrenadores pueden ver objetivos
        allow read: if request.auth != null && canTrain(academiaId);
        
        // Creaci√≥n: Director, subdirector y academyCoach pueden crear objetivos
        allow create: if request.auth != null && canManageTrainingPlans(academiaId);
        
        // Actualizaci√≥n: Todos los entrenadores pueden actualizar objetivos
        allow update: if request.auth != null && canTrain(academiaId);
        
        // Eliminaci√≥n: Solo director y subdirector pueden eliminar objetivos
        allow delete: if request.auth != null && canManageUsers(academiaId);
      }
      
      // ENCUESTAS (subcollection)
      match /surveys/{surveyId} {
        // Lectura: Miembros de la academia pueden ver encuestas
        allow read: if request.auth != null && belongsToAcademia(academiaId);
        
        // Creaci√≥n: Director, subdirector y academyCoach pueden crear encuestas
        allow create: if request.auth != null && canManageTrainingPlans(academiaId);
        
        // Actualizaci√≥n: El creador o roles superiores pueden modificar
        allow update: if request.auth != null && 
                         (canManageTrainingPlans(academiaId) && 
                          (resource.data.createdBy == request.auth.uid || canManageUsers(academiaId)));
        
        // Eliminaci√≥n: Solo director y subdirector pueden eliminar encuestas
        allow delete: if request.auth != null && canManageUsers(academiaId);
      }
      
      // RESPUESTAS DE ENCUESTAS (subcollection)
      match /surveyResponses/{responseId} {
        // Lectura: El propio usuario o gestores pueden ver respuestas
        allow read: if request.auth != null && 
                       (request.auth.uid == resource.data.userId || 
                        canViewAdvancedReports(academiaId));
        
        // Creaci√≥n: El usuario puede responder sus propias encuestas
        allow create: if request.auth != null && 
                        request.auth.uid == request.resource.data.userId;
        
        // Actualizaci√≥n: El usuario puede modificar sus respuestas (dentro de un per√≠odo)
        allow update: if request.auth != null && 
                        request.auth.uid == resource.data.userId;
        
        // Eliminaci√≥n: Solo directores y subdirectores pueden eliminar respuestas
        allow delete: if request.auth != null && canManageUsers(academiaId);
      }
      
      // M√âTRICAS (subcollection)
      match /metrics/{metricId} {
        // Lectura: Todos los entrenadores pueden ver m√©tricas
        allow read: if request.auth != null && canTrain(academiaId);
        
        // Creaci√≥n/Actualizaci√≥n: Todos los entrenadores pueden registrar m√©tricas
        allow create, update: if request.auth != null && canTrain(academiaId);
        
        // Eliminaci√≥n: Solo director y subdirector pueden eliminar m√©tricas
        allow delete: if request.auth != null && canManageUsers(academiaId);
      }
    }
    
    // CONFIGURACIONES DE ACADEMIA (colecci√≥n principal)
    match /academiaConfigs/{academiaId} {
      // Lectura: Miembros pueden leer configuraci√≥n
      allow read: if request.auth != null && belongsToAcademia(academiaId);
      
      // Escritura: Solo directores y subdirectores
      allow write: if request.auth != null && canManageUsers(academiaId);
    }
    
    // GESTI√ìN DE USUARIOS Y SUS ACADEMIAS
    match /userAcademias/{userId} {
      // Lectura: El propio usuario o usuarios autenticados (temporal para gesti√≥n)
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        hasManagementPermissions()
      );
      
      // Escritura: El propio usuario O directores/subdirectores que gestionen academias
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        hasManagementPermissions()
      );
    }
    
    match /users/{userId} {
      // Lectura: El propio usuario o miembros de academias compartidas
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Escritura: Solo el propio usuario
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // JUGADORES PRINCIPALES (si existen como colecci√≥n principal)
    match /players/{playerId} {
      // Para colecci√≥n principal de jugadores, verificar que pertenezca a la academia
      allow read, write: if request.auth != null && 
                           resource.data.academiaId != null &&
                           canTrain(resource.data.academiaId);
    }
    
    // OBJETIVOS PRINCIPALES (si existen como colecci√≥n principal)
    match /objectives/{objectiveId} {
      allow read, write: if request.auth != null && 
                           resource.data.academiaId != null &&
                           canTrain(resource.data.academiaId);
    }
    
    // SOLICITUDES DE UNI√ìN
    match /joinRequests/{requestId} {
      // Lectura: Gestores de la academia
      allow read: if request.auth != null && 
                     resource.data.academiaId != null &&
                     canManageUsers(resource.data.academiaId);
      
      // Escritura: Cualquier usuario puede crear solicitud, solo gestores pueden aprobar
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId;
      
      allow update, delete: if request.auth != null && 
                               resource.data.academiaId != null &&
                               canManageUsers(resource.data.academiaId);
    }
    
    // NOTIFICACIONES
    match /notifications/{notificationId} {
      // Solo el destinatario puede leer sus notificaciones
      allow read, write: if request.auth != null && 
                           request.auth.uid == resource.data.recipientId;
    }
    
    // AUDITOR√çA DE SEGURIDAD
    match /securityAudit/{auditId} {
      // Cualquier usuario autenticado puede escribir eventos de seguridad
      allow create: if request.auth != null;
      
      // Solo administradores del sistema pueden leer logs (opcional)
      allow read: if request.auth != null;
    }
  }
}